name: PR Validation

on:
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "18"

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.filter.outputs.apps }}
      packages: ${{ steps.filter.outputs.packages }}
      docs: ${{ steps.filter.outputs.docs }}
      dockstat: ${{ steps.filter.outputs.dockstat }}
      dockstore: ${{ steps.filter.outputs.dockstore }}
      sqlite-wrapper: ${{ steps.filter.outputs.sqlite-wrapper }}
      db: ${{ steps.filter.outputs.db }}
      typings: ${{ steps.filter.outputs.typings }}
      ci: ${{ steps.filter.outputs.ci }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            apps:
              - 'apps/**'
            packages:
              - 'packages/**'
            docs:
              - 'apps/docs/**/*.md'
            dockstat:
              - 'apps/dockstat/**'
            dockstore:
              - 'apps/dockstore/**'
            sqlite-wrapper:
              - 'packages/sqlite-wrapper/**'
            db:
              - 'packages/db/**'
            typings:
              - 'packages/typings/**'
            ci:
              - '.github/**'
              - 'package.json'
              - 'turbo.json'
              - 'tsconfig.base.json'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linter
        run: bun run lint

      - name: Check formatting
        run: bun run lint:check

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: bun run check-types

  test-packages:
    name: Test Packages
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.packages == 'true'
    strategy:
      matrix:
        package: [sqlite-wrapper, db, typings]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build package
        run: bun run build --filter=@dockstat/${{ matrix.package }}

      - name: Test package
        run: bun run test --filter=@dockstat/${{ matrix.package }}

  test-sqlite-wrapper:
    name: Test SQLite Wrapper
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.sqlite-wrapper == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build SQLite Wrapper
        run: bun run build --filter=@dockstat/sqlite-wrapper

      - name: Test SQLite Wrapper
        run: bun run test --filter=@dockstat/sqlite-wrapper

      - name: Test package installation
        run: |
          cd packages/sqlite-wrapper
          bun pack --dry-run

  test-apps:
    name: Test Apps
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true'
    strategy:
      matrix:
        app: [dockstat, dockstore, docs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build dependencies
        run: bun run build --filter=@dockstat/${{ matrix.app }}^...

      - name: Build app
        run: bun run build --filter=${{ matrix.app }}

      - name: Test app
        run: bun run test --filter=${{ matrix.app }}

  test-dockstat:
    name: Test Dockstat with Docker
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.dockstat == 'true'
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker
        run: |
          # Start some test containers for Dockstat to monitor
          docker run -d --name test-nginx nginx:alpine
          docker run -d --name test-redis redis:alpine
          docker ps

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build Dockstat
        run: bun run build --filter=dockstat

      - name: Test Dockstat
        run: bun run test --filter=dockstat

      - name: Integration test with Docker
        run: |
          # Run integration tests that interact with Docker
          cd apps/dockstat
          bun run test:integration

      - name: Cleanup
        run: |
          docker stop test-nginx test-redis || true
          docker rm test-nginx test-redis || true

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build all packages
        run: bun run build --filter=./packages/*

      - name: Build all apps
        run: bun run build --filter=./apps/*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.apps == 'true' || needs.changes.outputs.packages == 'true' || needs.changes.outputs.ci == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run security audit
        run: bun audit

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  package-size:
    name: Package Size Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.packages == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build packages
        run: bun run build --filter=./packages/*

      - name: Check package sizes
        run: |
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              echo "Checking size for $package"
              cd "$package"
              size=$(bun pack --dry-run 2>&1 | grep "package size" | awk '{print $3}' || echo "unknown")
              echo "Package size: $size"
              cd - > /dev/null
            fi
          done

  docs-build:
    name: Docs Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build docs
        run: bun run build --filter=docs

      - name: Check for broken links
        run: |
          cd apps/docs
          # Add link checking here if available
          echo "Docs built successfully"

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        typecheck,
        test-packages,
        test-apps,
        build-check,
        security,
        docs-build,
      ]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "TypeCheck: ${{ needs.typecheck.result }}"
          echo "Test Packages: ${{ needs.test-packages.result }}"
          echo "Test Apps: ${{ needs.test-apps.result }}"
          echo "Build Check: ${{ needs.build-check.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docs Build: ${{ needs.docs-build.result }}"

          if [[ "${{ needs.lint.result }}" == "failure" ||
                "${{ needs.typecheck.result }}" == "failure" ||
                "${{ needs.test-packages.result }}" == "failure" ||
                "${{ needs.test-apps.result }}" == "failure" ||
                "${{ needs.build-check.result }}" == "failure" ||
                "${{ needs.security.result }}" == "failure" ||
                "${{ needs.docs-build.result }}" == "failure" ]]; then
            echo "❌ PR validation failed"
            exit 1
          else
            echo "✅ PR validation passed"
          fi

      - name: Comment PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Passed' : '❌ Failed';
            const body = `
            ## PR Validation Results ${status}

            | Check | Status |
            |-------|--------|
            | Lint | ${{ needs.lint.result == 'success' && '✅' || needs.lint.result == 'failure' && '❌' || '⏭️' }} |
            | Type Check | ${{ needs.typecheck.result == 'success' && '✅' || needs.typecheck.result == 'failure' && '❌' || '⏭️' }} |
            | Package Tests | ${{ needs.test-packages.result == 'success' && '✅' || needs.test-packages.result == 'failure' && '❌' || '⏭️' }} |
            | App Tests | ${{ needs.test-apps.result == 'success' && '✅' || needs.test-apps.result == 'failure' && '❌' || '⏭️' }} |
            | Build Check | ${{ needs.build-check.result == 'success' && '✅' || needs.build-check.result == 'failure' && '❌' || '⏭️' }} |
            | Security Scan | ${{ needs.security.result == 'success' && '✅' || needs.security.result == 'failure' && '❌' || '⏭️' }} |
            | Docs Build | ${{ needs.docs-build.result == 'success' && '✅' || needs.docs-build.result == 'failure' && '❌' || '⏭️' }} |
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
